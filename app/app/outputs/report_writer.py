import os
import logging
from datetime import datetime
from typing import Dict, Any

logger = logging.getLogger("signalforge")


class ReportWriter:
    """
    ReportWriter handles the generation and saving of 
    human-readable Markdown reports based on generated signals.
    """

    def __init__(self, base_dir: str = "reports"):
        """
        Initialize ReportWriter.

        Args:
            base_dir (str): Base directory for saving reports.
        """
        self.base_dir = base_dir

    def save_report(self, signal: Dict[str, Any]) -> None:
        """
        Save the provided signal as a Markdown (.md) report file.

        Args:
            signal (dict): The signal data to save.
        """
        # Create folder path based on today's date for report organization
        today = datetime.utcnow().strftime("%Y-%m-%d")
        wallet = signal.get("wallet", "unknown").replace(":", "_").replace("/", "_")

        # Define target directory and create it if missing
        dir_path = os.path.join(self.base_dir, today)
        os.makedirs(dir_path, exist_ok=True)

        # Build filename based on wallet address
        file_path = os.path.join(dir_path, f"{wallet}.md")

        # Generate markdown content
        report_content = self._build_markdown(signal)

        # Write markdown report to file
        try:
            with open(file_path, "w") as f:
                f.write(report_content)
            logger.info(f"Report saved to {file_path}")
        except Exception as e:
            logger.error(f"Failed to save report to {file_path}: {e}")

    def _build_markdown(self, signal: Dict[str, Any]) -> str:
        """
        Build the Markdown content from a signal.

        Args:
            signal (dict): Signal data.

        Returns:
            str: Generated Markdown content.
        """
        # Start building markdown content line by line
        content = f"# Trading Signal\n\n"
        content += f"- **Wallet**: `{signal.get('wallet', 'N/A')}`\n"
        content += f"- **Signal**: `{signal.get('signal', 'N/A')}`\n"
        content += f"- **Confidence**: `{signal.get('confidence', 'N/A')}`\n"
        content += f"- **Reason**: {signal.get('reason', 'No reason provided.')}\n\n"

        content += f"## AI Comment\n\n"
        content += f"{signal.get('ai_comment', 'No AI comment available.')}\n\n"

        content += "---\n"
        content += f"_Generated by SignalForge on {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}_"

        return content
